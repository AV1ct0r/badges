from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
from Crypto.Random import get_random_bytes
from Crypto.Hash import SHA256
from Crypto.Util.Padding import unpad
import sys

n = 23515222943674849297874515495212530647591613085719842750956688127019499352474954307021949294776248031462809389319802881279937186213376124727170040098877115173080057635197844521044847499476721622967596327170669454744422266651568195943345486158729039622143993725361492281152411334582253366186456678668591820397155333314921268660807067682384577555880417419436396209624795437778767080908009586460890727838203635496016893432496560372587498817018644055422924445370440215205159485349856558069583011361038882865269517125858449022008443492759653487410585623230180235205803038963567089733351713824596599397514264514846706591761
e = 65537 # Common public exponent
d = 15880140028398637109195268425272993597526734698686067419501062043206570370048011470164600636101853691448815447037792940166432091603698682090652480807728510052797308250584955106465093926054606490826554133511138574058602631757100648733701337052550922922880950826205791009341950666736978645355756285525955365474824657083566917765691660808609774340514447925550613689373816603146088792252061268181239802251227273427345009148634306483091504539839003580073705924040182140076307000608987830765078226369402550377331816139605685474927037796570458566847739356841952793353676528815025906323610387259054927541545928467316550137801
p = 132607607504562545878121909151776274742674812857779419856390121428487910930920933559130088463469442395856661884417274322147214524802543356072389776356928828870509420537533379672271172130282090852796765788752916173175899842938433426819959197934812737300492337215487614359932570347099764904892741375434423140527
q = 177329365834956157630053495817220347650116105227209826948309091478273630236853230316150966092193594369808433803625254147002082542759984796524142488078507163048895356083703822239082101746651433792960002583403652760028411604228600803156935471584150085956738722242671349775098976506628679892542542752532516033343

key = RSA.construct((n, e, d, p, q))

pem_key = key.export_key(format='PEM', pkcs=8, passphrase=None) # Add passphrase for encryption

with open("rsa_key.pem", "wb") as f:
    f.write(pem_key)

with open('rsa_key.pem', 'rb') as f:
  private_key = RSA.import_key(f.read())

cipher_rsa = PKCS1_OAEP.new(private_key, hashAlgo=SHA256)
with open('Page1.png.enc', 'rb') as f:
  l = f.read(4)
  encrypted_aes_key = f.read(256)
  iv = f.read(16)
  ciphertext = f.read()

aes_key = cipher_rsa.decrypt(encrypted_aes_key)
cipher_aes = AES.new(aes_key, AES.MODE_CBC, iv)
padded_plaintext = cipher_aes.decrypt(ciphertext)

with open('Page1.png', 'wb') as f:
  f.write(unpad(padded_plaintext, 16))
